{
  
    
        "post0": {
            "title": "Note Template",
            "content": "Take some additional notes that you would like here for 3.12 and 3.13. We will be looking for additional notes from the presentation. . What are procedures? . Fill in the blanks please: . Procedure: a callable block of code from anywhere in a program . Parameters: limitations for code to follow . Arguments: a value passed though a function when it gets called. . Modularity: linking multiple modules then combining them to create a complete system . Procedural Abstraction: abstraction that occurs in a specific order to avoid errors . What are some other names for procedures?: subprograms or subroutines . Why are procedures effective?: procedures help to simplify code . Challenge 1 below: Add the command that will call the procedure. . def DecimalToBinary(num): strs = &quot;&quot; while num: # if (num &amp; 1) = 1 if (num &amp; 1): strs += &quot;1&quot; # if (num &amp; 1) = 0 else: strs += &quot;0&quot; # right shift by 1 num &gt;&gt;= 1 return strs # function to reverse the string def reverse(strs): print(strs[::-1]) # Driver Code num = 7 print(&quot;Binary of 7 is:&quot;, end=&quot; &quot;) reverse(DecimalToBinary(num)) . Binary of 7 is: 111 . Challenge 2 below: Complete the Min and Max procedure in either JavaScript and Python using the instructions from the JavaScript page. (JavaScript will get you a extra 0.1) . list = [1,2,3,4,12,5,6,17,43,6.2322] print(min(list)) print(max(list)) . 1 43 . Homework/Hacks: For the hw, you have two options, easy or hard. The easy hack is for a 2.7 + extra work for the full 3. The easy hack is simply creating your own procedure with your own creativity. Since there is a lot of leeway for this one, you must do additional work to get a 3. For the hard hack, below is the start to a character to binary convertor. This is just a template, but the goal is to translate &quot;APCSP&quot; into binary. You can delete the existing code if you want. The only contraint is that you must use a procedure. Doing this will get you a 3. . x = int(input()) print(bin(x)[2:]) . 101 .",
            "url": "https://itisnooby.github.io/DylanGarrett_fastpage5/2022/12/16/notetemplate.html",
            "relUrl": "/2022/12/16/notetemplate.html",
            "date": " • Dec 16, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Homework 3.17 - 3.18",
            "content": "3.17 Algorithmic Efficiency . Vocabulary . Problem: Decision Problem: | Organization Problem: | . | Instance: | Efficiency: Polynomial Efficiency (Good): | Exponential Efficiency (Bad): | . | Heuristic Approach: | Decidable Problem: | Undecidable Problem: | . Notes . efficiency is the amount of computingp ower needed to solve a problem | if a process is not efficient, it will be longer to achieve the same solution. | exponential efficiency is bad becuase the amount of computing power and time it takes is multiplied and it increases over time. | heruistic approach is when the most efficient solution is needed to be looked for because if not, it may result in exponential efficiency. | you use a test a lot of time to get more accurate data such as the length of time it takes and the amount of failures it has. More efficient code can be as much as 6x as fast as inneficient code. | you can model exponential efficiency by doing n^x an you will get a pretty accurate representation of the code&#39;s efficiency if you already have the data. | heruistic approaches are way more important if code will be ran a lot of times per second. | . Challenge . Try and fix this ineficcient code! Only change the code between the two commented lines. Fully programmed solution will improve your grade, at a minimum show that you tried. . import time numlist = [1,3,5,7,9,11,13,15,17,19] valuelist = [0,3,6,9,12,15,18,21] def isvalue(value, array): return value in array starttime = time.time() for i in range(100000): for value in valuelist: x = isvalue(value, numlist) endtime = time.time() print(endtime-starttime, &#39;seconds&#39;) . 0.6351044178009033 seconds . 3.18 Undecidable Problems . Homework! . Make an algorithm that finds the fastest route that hits every location once starting and ending at Del Norte. Make sure to show your thinking. If you are strugling, try using a huristic approach. Remember, what matters more than having perfectly functioning code is that you tried your hardest. . dataset = { &#39;DelNorte&#39;:{ &#39;Westview&#39;:15, &#39;MtCarmel&#39;:20, &#39;Poway&#39;:35, &#39;RanchoBernrdo&#39;:50 }, &#39;Westview&#39;:{ &#39;Del Norte&#39;:15, &#39;MtCarmel&#39;:35, &#39;Poway&#39;:25, &#39;RanchoBernrdo&#39;: 45 }, &#39;MtCarmel&#39;:{ &#39;Westview&#39;:35, &#39;Del Norte&#39;:20, &#39;Poway&#39;:40, &#39;RanchoBernrdo&#39;:30 }, &#39;Poway&#39;:{ &#39;Westview&#39;:25, &#39;MtCarmel&#39;:40, &#39;Del Norte&#39;:35, &#39;RanchoBernrdo&#39;:15 }, &#39;RanchoBernardo&#39;:{ &#39;Westview&#39;:45, &#39;MtCarmel&#39;:30, &#39;Poway&#39;:15, &#39;Del Norte&#39;:50 } } route = [&#39;Del Norte&#39;] time = 0 start = &#39;Del Norte&#39; while len(route) &lt; len(dataset): min_time = float(&#39;inf&#39;) next_dest = None for dest in dataset[start]: if dest not in route: if dataset[start][dest] &lt; min_time: min_time = dataset[start][dest] next_dest = dest time += min_time route.append(next_dest) start = next_dest time += dataset[route[-1]][&#39;Del Norte&#39;] route.append(&#39;Del Norte&#39;) print(route) print(time) . {(&#39;DelNorte&#39;, &#39;Westview&#39;): 15, (&#39;Westview&#39;, &#39;Del Norte&#39;): 15, (&#39;Poway&#39;, &#39;RanchoBernrdo&#39;): 15, (&#39;RanchoBernardo&#39;, &#39;Poway&#39;): 15} . explanation: . Initialize a list route with the starting location, Del Norte. This will be used to track the locations visited in the route. . | Initialize a variable time to 0. This will be used to track the total time taken for the route. . | While there are still unvisited locations: . | Find the destination location with the minimum travel time from the current starting location. | Add the time taken to travel to that location to time. | Append the destination location to route. | Set the destination location as the new starting location. | . Add the time taken to travel from the final destination back to Del Norte to time. . | Append Del Norte to route. . | Return route and time. . | Grading: . Challenge Homework . .15 pts for attempt | .65 for attempt | . .20 pts for complete | .70 for complete | . .25 pts for above and beyond | .75 pts for above and beyond | .",
            "url": "https://itisnooby.github.io/DylanGarrett_fastpage5/homework1718",
            "relUrl": "/homework1718",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Unit 3 Lesson 16, Student Copy",
            "content": "Hack #1 - Class Notes . the point of a simulation is to recreate a real-life sceneario that is too difficult or unrealistic to create in real life. This commonly uses random number generators and some examples of this may include rolling a die or recreating all forces that a missile may feel to test the trajectory of it. Random numbers are commohly generated through a module called random in python. To insert this module, all you need to do is type &quot;import random&quot; at the top of the python code segment. . Hack #2 - Functions Classwork . import random print(&quot;Your number is:&quot;) print(random.randint(1, 6)) . Your randomly generated number is: 4 . import random def coinflip(): #def function randomflip = random.randint(0, 2) #picks either 0 or 1 randomly (50/50 chance of either) if randomflip == 0: #assigning 0 to be heads--&gt; if 0 is chosen then it will print, &quot;Heads&quot; print(&quot;Heads&quot;) else: if randomflip &gt;= 1: #assigning 1 to be tails--&gt; if 1 is chosen then it will print, &quot;Tails&quot; print(&quot;Tails&quot;) #Tossing the coin 5 times: t1 = coinflip() t2 = coinflip() t3 = coinflip() t4 = coinflip() t5 = coinflip() . Tails Heads Tails Heads Tails . Hack #3 - Binary Simulation Problem . import random def randomnum(): # function for generating random int random.randint(1,8) def converttobin(n): # function for converting decimal to binary binary = bin(n) def survivors(binary): # function to assign position survivorstatus = [&quot;Jiya&quot;, &quot;Shruthi&quot;, &quot;Noor&quot;, &quot;Ananya&quot; , &quot;Peter Parker&quot;, &quot;Andrew Garfield&quot;, &quot;Tom Holland&quot;, &quot;Tobey Maguire&quot;] # replace the names above with your choice of people in the house . Hack #4 - Thinking through a problem . create your own simulation involving a dice roll | should include randomization and a function for rolling + multiple trials | . Hack 5 - Applying your knowledge to situation based problems . Using the questions bank below, create a quiz that presents the user a random question and calculates the user&#39;s score. You can use the template below or make your own. Making your own using a loop can give you extra points. . A researcher gathers data about the effect of Advanced Placement®︎ classes on students&#39; success in college and career, and develops a simulation to show how a sequence of AP classes affect a hypothetical student&#39;s pathway.Several school administrators are concerned that the simulation contains bias favoring high-income students, however. answer options: The simulation is an abstraction and therefore cannot contain any bias | The simulation may accidentally contain bias due to the exclusion of details. | If the simulation is found to contain bias, then it is not possible to remove the bias from the simulation. | The only way for the simulation to be biased is if the researcher intentionally used data that favored their desired output. | | . | Jack is trying to plan his financial future using an online tool. The tool starts off by asking him to input details about his current finances and career. It then lets him choose different future scenarios, such as having children. For each scenario chosen, the tool does some calculations and outputs his projected savings at the ages of 35, 45, and 55.Would that be considered a simulation and why? answer options No, it&#39;s not a simulation because it does not include a visualization of the results. | No, it&#39;s not a simulation because it does not include all the details of his life history and the future financial environment. | Yes, it&#39;s a simulation because it runs on a computer and includes both user input and computed output. | Yes, it&#39;s a simulation because it is an abstraction of a real world scenario that enables the drawing of inferences. | | . | Sylvia is an industrial engineer working for a sporting goods company. She is developing a baseball bat that can hit balls with higher accuracy and asks their software engineering team to develop a simulation to verify the design.Which of the following details is most important to include in this simulation? answer options Realistic sound effects based on the material of the baseball bat and the velocity of the hit | A depiction of an audience in the stands with lifelike behavior in response to hit accuracy | Accurate accounting for the effects of wind conditions on the movement of the ball | A baseball field that is textured to differentiate between the grass and the dirt | | . | Ashlynn is an industrial engineer who is trying to design a safer parachute. She creates a computer simulation of the parachute opening at different heights and in different environmental conditions.What are advantages of running the simulation versus an actual experiment? answer options The simulation will not contain any bias that favors one body type over another, while an experiment will be biased. | The simulation can be run more safely than an actual experiment | The simulation will accurately predict the parachute&#39;s safety level, while an experiment may be inaccurate due to faulty experimental design. | The simulation can test the parachute design in a wide range of environmental conditions that may be difficult to reliably reproduce in an experiment. | | this question has 2 correct answers | . | YOUR OWN QUESTION; can be situational, pseudo code based, or vocab/concept based | YOUR OWN QUESTION; can be situational, pseudo code based, or vocab/concept based | questions = 6 correct = 0 Q1 = input() if Q1 == : Q2 = input() if Q2 == : Q3 = input() if Q3 == : Q4 = input() print( &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hack #6 / Challenge - Taking real life problems and implementing them into code . Create your own simulation based on your experiences/knowledge! Be creative! Think about instances in your own life, science, puzzles that can be made into simulations . Some ideas to get your brain running: A simulation that breeds two plants and tells you phenotypes of offspring, an adventure simulation... .",
            "url": "https://itisnooby.github.io/DylanGarrett_fastpage5/2022/12/12/hw.html",
            "relUrl": "/2022/12/12/hw.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Unit 3 Sections 14-15 Homework",
            "content": "Create a program that asks the user for a day and then gives them a distance in days between that day and another random day in the year. We have provided you with a possible starter, but you are welcome to change it up if you would like. . import random # ask the user for a day day = input(&quot;Enter a day (1-365): &quot;) # generate a random day random_day = random.randint(1, 365) # calculate the distance between the two days distance = abs(int(day) - random_day) # print the result print(&quot;The distance between day {} and day {} is {} days.&quot;.format(day, random_day, distance)) . The distance between day 60 and day 342 is 282 days. .",
            "url": "https://itisnooby.github.io/DylanGarrett_fastpage5/week-13/big-idea-3/2022/12/03/libraries-hw.html",
            "relUrl": "/week-13/big-idea-3/2022/12/03/libraries-hw.html",
            "date": " • Dec 3, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Homework",
            "content": "Homework/Hacks . our homework we have decided for a decimal number to binary converter. You must use conditional statements within your code and have a input box for where the decimal number will go. This will give you a 2.7 out of 3 and you may add anything else to the code to get above a 2.7. . Below is an example of decimal number to binary converter which you can use as a starting template. . def DecimalToBinary(num): strs = &quot;&quot; while num: # if (num &amp; 1) = 1 if (num &amp; 1): strs += &quot;1&quot; # if (num &amp; 1) = 0 else: strs += &quot;0&quot; # right shift by 1 num &gt;&gt;= 1 return strs # function to reverse the string def reverse(strs): print(strs[::-1]) # Driver Code num = input(&quot;what number do you choose?&quot;) print(&quot;Binary of your number is:&quot;, end=&quot; &quot;) reverse(DecimalToBinary(num)) . Binary of number is: . TypeError Traceback (most recent call last) &lt;ipython-input-16-6454bb139512&gt; in &lt;module&gt; 19 num = input(&#34;what number do you choose?&#34;) 20 print(&#34;Binary of number is:&#34;, end=&#34; &#34;) &gt; 21 reverse(DecimalToBinary(num)) &lt;ipython-input-16-6454bb139512&gt; in DecimalToBinary(num) 3 while num: 4 # if (num &amp; 1) = 1 -&gt; 5 if (num &amp; 1): 6 strs += &#34;1&#34; 7 # if (num &amp; 1) = 0 TypeError: unsupported operand type(s) for &amp;: &#39;str&#39; and &#39;int&#39; .",
            "url": "https://itisnooby.github.io/DylanGarrett_fastpage5/week%2013/2022/11/30/homework.html",
            "relUrl": "/week%2013/2022/11/30/homework.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Searching Introduction",
            "content": "What is searching? . In certain computer programs and applications, one might find the need to locate and retrieve a data value and/or it&#39;s index. Searching algorithms could be done in either intervals or sequences, and certain algorithms could be more efficient than others, with benefits and drawbacks to each. . The Naive Approach . The most intuitively obvious solution to the searching problem is to sequentialy check each successful value in the data structure until either a matching value is found, or the entire structure has been transversed. This thought process could be explained graphically in this example . This algorithm could also be expressed in code, as shown below. . def sequentialSearch(arr, target): N = len(arr) # Declare N as length of array for i in range(N): # Iterate over the list if arr[i] == target: # Check for match return i # Match found, return index and end function call return -1 # Element not found . Sequential Search - Larger Inputs . Although for selection sort is seemingly fast for smaller inputs, it is clear that it cannot keep up with increasing input sizes. Because sequential search checks every value of the given array, the algorithm&#39;s overall runtime increases &quot;linearly&quot; with the input size. . i.e. Pretend that one check takes one second, and that we are searching for the last element in an array. If the array length is 4, it would take 4 seconds to find the last element, whereas if the array length is 86400 indices long, it would take a whole day to find the element. . Hence, although selection sort is known for its simplicity, it is unfeasible for large inputs . Below, we have created three sorted lists of length 100,1000000,100000000. . import time arr1 = [i for i in range(100)] arr2 = [i for i in range(1000000)] arr3 = [i for i in range(100000000)] . KeyboardInterrupt Traceback (most recent call last) &lt;ipython-input-1-5d4d69bebe90&gt; in &lt;module&gt; 2 arr1 = [i for i in range(100)] 3 arr2 = [i for i in range(1000000)] -&gt; 4 arr3 = [i for i in range(100000000)] &lt;ipython-input-1-5d4d69bebe90&gt; in &lt;listcomp&gt;(.0) 2 arr1 = [i for i in range(100)] 3 arr2 = [i for i in range(1000000)] -&gt; 4 arr3 = [i for i in range(100000000)] KeyboardInterrupt: . To analyze the sequential search algorithm, we will check for the worst case scenario, where runtime is maximized. This is because when measuring the efficiency of our algorithm, we want to be able to guarantee an upper limit or set amount of time for our program to finish running. To do this, we will attempt to search for the last element in the array . print(&quot;length of list: &quot;, len(arr1)) s = time.time() print(&quot;Index: &quot;, sequentialSearch(arr1,99)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100 . NameError Traceback (most recent call last) &lt;ipython-input-2-af0b192bae5c&gt; in &lt;module&gt; 2 print(&#34;length of list: &#34;, len(arr1)) 3 s = time.time() -&gt; 4 print(&#34;Index: &#34;, sequentialSearch(arr1,99)) 5 e = time.time() 6 print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) NameError: name &#39;sequentialSearch&#39; is not defined . print(&quot;length of list: &quot;, len(arr2)) s = time.time() print(&quot;Index: &quot;, sequentialSearch(arr2,999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 1000000 Index: 999999 Execution time: 58.67457389831543 ms . print(&quot;length of list: &quot;, len(arr3)) s = time.time() print(&quot;Index: &quot;, sequentialSearch(arr3,99999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100000000 Index: 99999999 Execution time: 5162.384986877441 ms . As you can see, as the input list grows larger and larger, the overall runtime of the program increases linearly as well, resulting in a lower scalability for the sequential search algorithm. . Binary Search . Binary search is an efficient way to iterate through a SORTED list to find a requested value. This is done through checking the middle value of a list and checking if the requested value is greater than or less than the middle value. You can start to see why the requested list must be sorted. If the list is not sorted, this logic is flawed, and the binary search algorithm will no longer work. . Unlike the sequential search method, binary search doesn&#39;t check for each successive element until a match is found. In every iteration the algorithm is making a binary decision; if the selected element is larger or smaller than the target. . How exactly does this work? Lets look at these amazing ms paint drawings: . i was too lazy to make a third so ur gonna have to live with 2 :) . This algorithm is extremely efficient as the maximum number of cycles in binary search is equal to log base 2 of the closest, next power of two, to length of list. . If the array is 8 items long, the maximum possible cycles would be 3 (log base 2 of 8 is 3) . If the array is 7 items long, the maximum possible cycles would STILL be 3 as the closest power of 2 to 7 is 8. . If the array is 9 items long, the maximum possible cycles INCREASES to 4, as the closest, next power of two, is 16. . def binarySearch(array, target): # Parameters: array is the given array and target is what we are looking for low = 0 # the starting lower bound high = len(array)-1 # the starting upper bound while high &gt;= low: # we will keep running until we run out of possible subarrays... mid = (high + low) // 2 # define the middle of the list to be the item at the index of the average of the lower and upper bound if array[mid] == target: # if item is in the middle of the list... we found what we are looking for! return mid # therefore, we return the index of where we found the item. elif array[mid] &gt; target: # if item is less than the middle of the list, this must mean that the item is on the lower half of the list high = mid-1 # therefore, we set the upper bound of the search to be the last item of the lower half else: # if item is neither less than or equal to the middle of the list, this must mean that the item is on the upper half of the list low = mid+1 # therefore, we set the lower bound of the search to be the first item of the upper half # if nothing is returned by the time the while loop ends, that means item MUST be missing from list return False # therefore we tell the user that the requested item was not found . Likewise, we can also take a recursive approach to this problem, note the similarities . def BinarySearchRecursion(arr, target, lo, hi): if lo &gt; hi: return False mid = (lo+hi)//2 if arr[mid] == target: return mid elif arr[mid] &gt; target: return BinarySearchRecursion(arr, target, lo, mid-1) elif arr[mid] &lt; target: return BinarySearchRecursion(arr, target, mid+1, hi) . Now, let&#39;s compare the runtime with the same lists we tried with the sequential search algorithm. . print(&quot;length of list: &quot;, len(arr1)) s = time.time() print(&quot;Index: &quot;, binarySearch(arr1,99)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100 Index: 99 Execution time: 0.05507469177246094 ms . print(&quot;length of list: &quot;, len(arr2)) s = time.time() print(&quot;Index: &quot;, binarySearch(arr2,999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 1000000 Index: 999999 Execution time: 0.17070770263671875 ms . print(&quot;length of list: &quot;, len(arr3)) s = time.time() print(&quot;Index: &quot;, binarySearch(arr3,99999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100000000 Index: 99999999 Execution time: 0.06628036499023438 ms . arr4 = [1,4,5,8,10,13,145,1938] print(&quot;Index: &quot;, binarySearch(arr4,17)) . Index: False . Challenges and Homework . You have one homework problem. . Yes just one. . Don&#39;t get excited though. . Problem: Given a specific integer N, return the square root of N (R) if N is a perfect square, otherwise, return the square root of N rounded down to the nearest integer . Input: N (Integer) . Output: R (Integer) . Constraints: Do not use any built-in math operations such as sqrt(x) or x**(0.5), Try complete the problem in logarithmic time. . Hint 1: Maybe you can use Binary Search to try and reduce the number of checks you have to perform? . Hint 2: Is there a mathematical pattern amongst numbers and their square roots that could help you reduce the number of searches or iterations you must execute? Is there some value or rule you can set before applying binary search to narrow the range of possible values? . Run the very last code segment below to load test cases and submission function . def sqrt(N): # Write your code here return None . File &#34;&lt;ipython-input-14-6a6cf74ff609&gt;&#34;, line 4 while i * i != N: ^ IndentationError: expected an indented block . from math import sqrt as sq test_cases = [0,1,4,85248289,22297284,18939904,91107025,69122596,9721924,37810201,1893294144,8722812816,644398225] answers = [int(sq(x)) for x in test_cases] def checkValid(): for i in range(len(test_cases)): if sqrt(test_cases[i]) == answers[i]: print(&quot;Check number {} passed&quot;.format(i+1)) else: print(&quot;Check number {} failed&quot;.format(i+1)) checkValid() . evalmachine.&lt;anonymous&gt;:1 from math import sqrt as sq ^^^^ SyntaxError: Unexpected identifier at createScript (vm.js:56:10) at Object.runInThisContext (vm.js:97:10) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) at process._tickCallback (internal/process/next_tick.js:104:9) .",
            "url": "https://itisnooby.github.io/DylanGarrett_fastpage5/2022/11/29/searching-introduction.html",
            "relUrl": "/2022/11/29/searching-introduction.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "3.1 and 3.2 Challange and HW",
            "content": "Notes on 3.1 and 3.2 . Key Details . Variables are abstractions within programs which represent a value | Values can be individual data points or a list/collection that contains many data values | Types of data (ie; numbers, Booleans (T/F), lists, and strings) | Languages (Python and Javascript) | Transformations of languages to HTML . | Elements are unique, individual values . | Lists are made up of elements | Strings are made of repeating characters instead of elements | Data abstraction uses a list by taking specific data elements from a list and organizing into a whole, less complex representation of the values such as a table in windows Excel which uses similar function | . | . Challenge . The list given contains multiple numbers with different values. There are also 2 variables that define the minimum and maximum valid values. Given these variables, output the values that do not fit into the valid range as well as their index values. . data = [104, 101, 4, 105, 308, 103, 5, 107, 100, 306, 106, 102, 108] # list of the different numerical values for a in data: if a &gt; 100: if a &lt; 200: ind = data.index(a) print(&quot;the index of &quot; + str(a) + &quot; is at place &quot; + str(ind + 1) + &quot; out of 13 in the list&quot;) else: continue else: continue . Homework/Hacks . The list given contains 4 album names - Welcome to my Nightmare, Bad Company, Nightflight, More Mayhem - and each album contains at least 4 songs within another list. Given this, write a block of code that enables users to input in integer values that correspond to the albums and songs - Welcome to my Nightmare is 1, Bad Company is 2, etc. - Then, a sentence is outputted that says Playing ___ based on which song was chosen using the numbers inputted by the user that corresponds to each song. . albums = [ (&quot;Welcome to my Nightmare&quot;, &quot;Alice Cooper&quot;, 1975, # First album list [ (1, &quot;Welcome to my Nightmare&quot;), (2, &quot;Devil&#39;s Food&quot;), (3, &quot;The Black Widow&quot;), (4, &quot;Some Folks&quot;), (5, &quot;Only Women Bleed&quot;), ] ), (&quot;Bad Company&quot;, &quot;Bad Company&quot;, 1974, # Second album list [ (1, &quot;Can&#39;t Get Enough&quot;), (2, &quot;Rock Steady&quot;), (3, &quot;Ready for Love&quot;), (4, &quot;Don&#39;t Let Me Down&quot;), (5, &quot;Bad Company&quot;), (6, &quot;The Way I Choose&quot;), (7, &quot;Movin&#39; On&quot;), (8, &quot;Seagull&quot;), ] ), (&quot;Nightflight&quot;, &quot;Budgie&quot;, 1981, [ (1, &quot;I Turned to Stone&quot;), (2, &quot;Keeping a Rendezvous&quot;), (3, &quot;Reaper of the Glory&quot;), (4, &quot;She Used Me Up&quot;), ] ), (&quot;More Mayhem&quot;, &quot;Imelda May&quot;, 2011, [ (1, &quot;Pulling the Rug&quot;), (2, &quot;Psycho&quot;), (3, &quot;Mayhem&quot;), (4, &quot;Kentish Town Waltz&quot;), ] ), ] albumval = input(&quot;enter the number of song from what is shown below&quot;) songval = input(&quot;enter the number of album from what is shown below&quot;) print(&quot;Now playing: &quot; + albums[int(albumval) - 1][3][int(songval) - 1][1]) print(&quot;album #: &quot; + albumval + &quot;, song #: &quot; + songval) . Now playing: Welcome to my Nightmare album #: 1, song #: 1 .",
            "url": "https://itisnooby.github.io/DylanGarrett_fastpage5/jupyter/week%2013/2022/11/27/Challenge-and-Homework.html",
            "relUrl": "/jupyter/week%2013/2022/11/27/Challenge-and-Homework.html",
            "date": " • Nov 27, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Lists and Iteration Homework",
            "content": "Overview and Notes: 3.10 - Lists . Make sure you complete the challenge in the challenges section while we present the lesson! | . Add your OWN Notes for 3.10 here: . Fill out the empty boxes: . Pseudocode Operation Python Syntax Description . aList[i] | aList[i] | Accesses the element of aList at index i | . x ← aList[i] | x = aList(i) | Assigns the element of aList at index i to a variable &#39;x&#39; | . aList[i] ← aList[j] | aList(i) = x | Assigns the value of a variable &#39;x&#39; to the element of a List at index i | . aList[i] ← aList[j] | aList.insert(i, value) | Assigns value of aList[j] to aList[i] | . APPEND(aList, value) | aList.insert(i, value) | value is placed at index i in aList. Any element at an index greater than i will shiftone position to the right. | . APPEND(aList, value) | aList.append(value) | Removes item at index i and any values at indices greater than i shift to the left. Length of aList decreased by 1. | . REMOVE(aList, i) | aList.pop(i)ORaList.remove(value) | Removes item at index i and any values at indices greater than i shift to the left. Length of aList decreased by 1. | . Overview and Notes: 3.8 - Iteration . Add your OWN Notes for 3.8 here: . Homework Assignment . Instead of us making a quiz for you to take, we would like YOU to make a quiz about the material we reviewed. . We would like you to input questions into a list, and use some sort of iterative system to print the questions, detect an input, and determine if you answered correctly. There should be at least five questions, each with at least three possible answers. . You may use the template below as a framework for this assignment. . questions = [ &quot;Should Mr.Yueng give Dylan an A+ on this assignment&quot;, &quot;When does Christmas Break start (mm/dd/yyyy)&quot;, &quot;&quot; ] def questionloop(): pass #make an iterative function to ask the questions #this can be any loop you want as long as it works! def answercheck(): pass #make a function to check if the answer was correct or not . Hacks . Here are some ideas of things you can do to make your program even cooler. Doing these will raise your grade if done correctly. . Add more than five questions with more than three answer choices | Randomize the order in which questions/answers are output | At the end, display the user&#39;s score and determine whether or not they passed | . Challenges . Important! You don&#39;t have to complete these challenges completely perfectly, but you will be marked down if you don&#39;t show evidence of at least having tried these challenges in the time we gave during the lesson. . 3.10 Challenge . Follow the instructions in the code comments. . grocery_list = [&#39;apples&#39;, &#39;milk&#39;, &#39;oranges&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;] # Print the fourth item in the list print(grocery_list[3]) # Now, assign the fourth item in the list to a variable, x and then print the variable x = grocery_list[3] print(x) # Add these two items at the end of the list : umbrellas and artichokes grocery_list.append(&#39;umbrellas&#39;) grocery_list.append(&#39;artichokes&#39;) # Insert the item eggs as the third item of the list grocery_list.insert(2, &#39;eggs&#39;) # Remove milk from the list grocery_list.remove(&#39;milk&#39;) # Assign the element at the end of the list to index 2. Print index 2 to check index2 = grocery_list[7] print(index2) # Print the entire list, does it match ours ? print(grocery_list) # Expected output # carrots # carrots # artichokes # [&#39;apples&#39;, &#39;eggs&#39;, &#39;artichokes&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;, &#39;umbrellas&#39;, &#39;artichokes&#39;] . carrots carrots . IndexError Traceback (most recent call last) &lt;ipython-input-32-764961c9f3eb&gt; in &lt;module&gt; 14 grocery_list.remove(&#39;milk&#39;) 15 # Assign the element at the end of the list to index 2. Print index 2 to check &gt; 16 index2 = grocery_list[7] 17 print(index2) 18 # Print the entire list, does it match ours ? IndexError: list index out of range . 3.8 Challenge . Create a loop that converts 8-bit binary values from the provided list into decimal numbers. Then, after the value is determined, remove all the values greater than 100 from the list using a list-related function you&#39;ve been taught before. Print the new list when done. . Once you&#39;ve done this with one of the types of loops discussed in this lesson, create a function that does the same thing with a different type of loop. . binarylist = [ &quot;01001001&quot;, &quot;10101010&quot;, &quot;10010110&quot;, &quot;00110111&quot;, &quot;11101100&quot;, &quot;11010001&quot;, &quot;10000001&quot; ] def binary_convert(binary): pass #use this function to convert every binary value in binarylist to decimal #afterward, get rid of the values that are greater than 100 in decimal #when done, print the results .",
            "url": "https://itisnooby.github.io/DylanGarrett_fastpage5/homework/",
            "relUrl": "/homework/",
            "date": " • Nov 26, 2022"
        }
        
    
  

  
  

  

  
      ,"page2": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://itisnooby.github.io/DylanGarrett_fastpage5/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://itisnooby.github.io/DylanGarrett_fastpage5/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}